M001			みんなが楽しいパーティー


問題を読み解く
冠関数とdomainsとdomainの役割
便利なリテラル表現
関数型への移植
最初の実装

問題を読み解く
ホワイト氏はとても多才なひとだ。あらゆる事が興味の対象になる。だから彼には多くの友人がいる。
しかし彼の友人たちは２つの話題だけに興味を持ち、他の事柄には話を拒む。彼のパーティーを楽しくするために、
招待できる友人の最大数を求める。ホワイト氏のI番目の友達が興味を持つ二つの話題が順に収まる、二つの文字列リストを受け取る。
この問題のお手本コードの制約に書かれているfst[i]とsnd[i]は必ず異なる。が無ければ構造としての友人が必要になる。けど、
制約に従えば、まず重複を許さないリストを作り、そのリストのトラバース中に重複を含むリストを読み込む重複数を
数え上げたリストを作りそこから最大値を求めれは良い。と言うよりもこれは、単語の出現頻度をマップ構造を使って実現する典型的な
ロジックになる。まずは、各言語でのマップ構造の実現を復習した後、同一人物が二つの文字列リストに同じ趣味を書く事を許容した、
縛りで実装してみる。

冠関数とdomainsとdomainの役割
問題も二回り目となると内容によって、ある程度ロジックが分かった上での実装になる。今回の問題も読み解いてしまえば、
単なるマップ機能の実現が各言語によってどのように違いどのように同じなのかをひと廻りしながら思い出す事にする。
そして、前回と同じ縛りを課してもう一回り行ってみる。その解決には構造が必要だと思う。

冠関数	: 	制約に従えば、新しい構造は必要ないので、二つの文字列リストを統合するのが仕事か？
domains	:	マップ構造を受け取り最大値を抽出して文字列リストに入れる
domain	:	重複のある単語リストを受け取りマップ構造にして返す


便利なリテラル表現
["fishing gardening swimming fishing","hunting fishing fishing biting"]			=>		["4"]
["variety diversity loguacity cortesy","talking speaking discussion meeting"]		=>	["1"]
["fishing gardening swimming fishing","hunting fishing fishing biting"]			=>		["4"]

["fishing","gardening","swimming","fishing","hunting","fishing","fishing","biting"]
["fishing","gardening","swimming","hunting","biting"]			=>		[4]


関数型への移植
[fishing;gardening;swimming;fishing;hunting;fishing;fishing;biting]



最初の実装

